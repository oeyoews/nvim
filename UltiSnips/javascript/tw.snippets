# vim:ts=4 sw=4 noexpandtab ft=snippets

snippet currentTiddler "currentTiddler" b
const currentTiddler = this.getVariable('currentTiddler');
endsnippet

snippet new-tiddler "new tiddler" b
$tw.wiki.addTiddler(
  new $tw.Tiddler({ title: '$1', text: '$0' }),
);
endsnippet

snippet notify "show message with tiddlywiki" b
$tw.wiki.addTiddler(new $tw.Tiddler({title: "$:/temp/oeyoews/notify", text: "demo clicked"}));
$tw.notifier.display("$:/temp/oeyoews/notify")
endsnippet

snippet domMaker "domMaker" b
const ${0}Node = $tw.utils.domMaker('${1:div}', {
	text: '$1',
	class: '',
	attributes: {},
	children: [],
    eventListeners: [
      {
        name: 'click',
        handlerObject: this,
        handlerMethod: '',
      },
    ],
})
endsnippet

snippet mob "mob adjust" b
if (navigator.userAgent.match(/Mobile/i))
endsnippet

snippet browser "browser" b
if (!$tw.browser) return;
endsnippet

snippet title "title" b
/*\
title: $1.js
type: application/javascript
module-type: $2

$1
\*/
endsnippet

snippet template-widget "general widget" b
/*\
title: $1/widget
type: application/javascript
module-type: widget

$1 widget

\*/
(function () {
  /*jslint node: true, browser: true */
  /*global $tw: false */
  'use strict';

  if (!$tw.browser) return;

  const Widget = require('$:/core/modules/widgets/widget.js').widget;

  class DivWidget extends Widget {
    constructor(parseTreeNode, options) {
      super(parseTreeNode, options);
    }

    render(parent, nextSibling) {
      this.parentDomNode = parent;
      this.computeAttributes();
      this.execute();

      const param = this.getAttribute('param', 'Test Param');
      const classNames = this.getAttribute('class', '').split('');

	  const buttonNode = $tw.utils.domMaker('button', {
		text: param,
		class: '',
		attributes: {},
        children: [],
        eventListeners: [
          {
            name: 'click',
            handlerObject: this,
            handlerMethod: 'handlerClick',
          },
        ],
	  })
	  classNames.forEach(className => {
        if (className) {
			buttonNode.classList.add(className)
        }
      });
      parent.insertBefore(buttonNode, nextSibling);
      this.domNodes.push(buttonNode);
    }

    handlerClick = () => {
      console.log('button clicked');
    };

  }

  exports['$1'] = DivWidget;
})();
endsnippet

snippet startup "startup" b
/*\
title: $1/startup.js
type: application/javascript
module-type: startup

$1 module

\*/
(function () {
  /*jslint node: true, browser: true */
  /*global $tw: false */
  'use strict';

  exports.name = '$1-startup-hook';
  exports.platforms = ['browser'];
  exports.after = ['load-modules'];
  exports.synchronous = true;
  exports.startup = () => {
	window.$1 = require('$1.min.js')
  };
})();
endsnippet
