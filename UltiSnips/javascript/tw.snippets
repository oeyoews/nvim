# vim:ts=4 sw=4 noexpandtab ft=snippets

snippet currentTiddler "currentTiddler" b
const currentTiddler = this.getVariable('currentTiddler');
endsnippet

snippet mob "mob adjust" b
if (navigator.userAgent.match(/Mobile/i))
endsnippet

snippet browser "browser" b
if (!$tw.browser) return;
endsnippet

snippet title "title" b
/*\
title: $1.js
type: application/javascript
module-type: $2

$1
\*/
endsnippet

snippet template-widget "general widget" b
/*\
title: $1widget
type: application/javascript
module-type: widget

$1 widget

\*/
(function () {
  /*jslint node: true, browser: true */
  /*global $tw: false */
  'use strict';

  if (!$tw.browser) return;

  const Widget = require('$:/core/modules/widgets/widget.js').widget;

  class DivWidget extends Widget {
    constructor(parseTreeNode, options) {
      super(parseTreeNode, options);
    }

    render(parent, nextSibling) {
      this.parentDomNode = parent;
      this.computeAttributes();
      this.execute();

      const param = this.getAttribute('param', 'Test Param');

      const divNode = this.document.createElement('div');
      divNode.id = 'divId';
      divNode.textContent = param;
      divNode.className = 'divClass';
      parent.insertBefore(divNode, nextSibling);
      this.domNodes.push(divNode);
    }

    refresh() {
      var changedAttributes = this.computeAttributes();
      // changedAttributes.title;
      if (Object.keys(changedAttributes).length > 0) {
        this.refreshSelf();
        return true;
      } else {
        return false;
      }
    }
  }

  exports.$1 = DivWidget;
})();
endsnippet

snippet startup "startup" b
/*\
title: $1/startup.js
type: application/javascript
module-type: startup

$1 module

\*/
(function () {
  /*jslint node: true, browser: true */
  /*global $tw: false */
  'use strict';

  exports.name = '$1-startup-hook';
  exports.platforms = ['browser'];
  exports.after = ['load-modules'];
  exports.synchronous = true;
  exports.startup = () => {
	window.$1 = require('$1.min.js')
  };
})();
endsnippet
